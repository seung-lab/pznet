#include <iostream>
#include <chrono>
#include <znn/interface/conv_wrapper.hpp>
#include <znn/layer/block_data.hpp>
#include <znn/layer/unblock_data.hpp>
#include <cstring>
#include "znet.hpp"
#include "common.hpp"


znn::phi::Znet::Znet(void)
{
	tensors["conv0_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["conv0_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv0_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv0_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["conv0_d5"] = new znn::phi::hbw_array<float>(62208);
	tensors["conv0_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["conv4_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv4_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["conv4_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["user_input"] = new znn::phi::hbw_array<float>(5308416);
	tensors["sum4_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["Deconvolution4"] = new znn::phi::hbw_array<float>(6635520);
	tensors["conv4_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["convf1_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["convf1_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["convf1_d5"] = new znn::phi::hbw_array<float>(62208);
	tensors["convf1_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["Eltwise4"] = new znn::phi::hbw_array<float>(6635520);
	tensors["convf2_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["convf2_d5"] = new znn::phi::hbw_array<float>(62208);
	tensors["convf6_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["Deconvolution2"] = new znn::phi::hbw_array<float>(663552);
	tensors["convf6_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["convf2_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["convf2_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["sum0_d5"] = new znn::phi::hbw_array<float>(62208);
	tensors["sum0_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["conv4_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["sum0_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["sum0_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["sum0_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["sum0_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["convf5_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["score"] = new znn::phi::hbw_array<float>(5308416);
	tensors["Deconvolution3"] = new znn::phi::hbw_array<float>(1990656);
	tensors["convf5_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["convf5_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["user_output"] = new znn::phi::hbw_array<float>(5308416);
	tensors["input"] = new znn::phi::hbw_array<float>(5308416);
	tensors["conv2_d5"] = new znn::phi::hbw_array<float>(62208);
	tensors["conv2_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["conv2_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv2_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["conv2_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["conv2_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv6_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv6_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["sum4_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv6_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["convf6_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["deconv_d3"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv5_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["conv5_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv5_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv5_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["Deconvolution1"] = new znn::phi::hbw_array<float>(207360);
	tensors["conv5_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["sum4_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["sum4_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["sum4_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv1_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["conv1_d5"] = new znn::phi::hbw_array<float>(62208);
	tensors["conv1_d2"] = new znn::phi::hbw_array<float>(1990656);
	tensors["conv1_d3"] = new znn::phi::hbw_array<float>(663552);
	tensors["conv1_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv1_d1"] = new znn::phi::hbw_array<float>(6635520);
	tensors["convi"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv6_d4"] = new znn::phi::hbw_array<float>(207360);
	tensors["Eltwise3"] = new znn::phi::hbw_array<float>(1990656);
	tensors["Eltwise2"] = new znn::phi::hbw_array<float>(663552);
	tensors["Eltwise1"] = new znn::phi::hbw_array<float>(207360);
	tensors["pool_d2"] = new znn::phi::hbw_array<float>(1658880);
	tensors["pool_d3"] = new znn::phi::hbw_array<float>(497664);
	tensors["pool_d1"] = new znn::phi::hbw_array<float>(5308416);
	tensors["pool_d4"] = new znn::phi::hbw_array<float>(165888);
	tensors["pool_d5"] = new znn::phi::hbw_array<float>(51840);
	tensors["conv7_d0"] = new znn::phi::hbw_array<float>(21233664);
	tensors["output"] = new znn::phi::hbw_array<float>(5308416);
	tensors["merge_d3"] = new znn::phi::hbw_array<float>(21233664);
	tensors["conv6_d1"] = new znn::phi::hbw_array<float>(6635520);
	
	tensors["conv0_d1_kernel"] = new znn::phi::hbw_array<float>(11520);
	tensors["conv0_d1_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["conv0_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv0_d0_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["conv0_d3_kernel"] = new znn::phi::hbw_array<float>(27648);
	tensors["conv0_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv0_d2_kernel"] = new znn::phi::hbw_array<float>(17280);
	tensors["conv0_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["conv0_d5_kernel"] = new znn::phi::hbw_array<float>(69120);
	tensors["conv0_d5_bias"] = new znn::phi::hbw_array<float>(96);
	tensors["conv0_d4_kernel"] = new znn::phi::hbw_array<float>(46080);
	tensors["conv0_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv4_d3_kernel"] = new znn::phi::hbw_array<float>(36864);
	tensors["conv4_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv4_d4_kernel"] = new znn::phi::hbw_array<float>(57600);
	tensors["conv4_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv4_d1_kernel"] = new znn::phi::hbw_array<float>(14400);
	tensors["conv4_d1_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["conv5_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv5_d0_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["conv4_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv4_d0_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["conv6_d3_kernel"] = new znn::phi::hbw_array<float>(12288);
	tensors["conv6_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv6_d2_kernel"] = new znn::phi::hbw_array<float>(6912);
	tensors["conv6_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["convf6_d2_kernel"] = new znn::phi::hbw_array<float>(20736);
	tensors["convf6_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["convf6_d4_kernel"] = new znn::phi::hbw_array<float>(57600);
	tensors["convf6_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv6_d4_kernel"] = new znn::phi::hbw_array<float>(19200);
	tensors["conv6_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["convf5_d4_kernel"] = new znn::phi::hbw_array<float>(57600);
	tensors["convf5_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["convf5_d3_kernel"] = new znn::phi::hbw_array<float>(36864);
	tensors["convf5_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["convf5_d2_kernel"] = new znn::phi::hbw_array<float>(20736);
	tensors["convf5_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["Deconvolution2_kernel"] = new znn::phi::hbw_array<float>(20480);
	tensors["Deconvolution2_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["Deconvolution4_kernel"] = new znn::phi::hbw_array<float>(7680);
	tensors["Deconvolution4_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["Deconvolution1_kernel"] = new znn::phi::hbw_array<float>(30720);
	tensors["Deconvolution1_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv2_d5_kernel"] = new znn::phi::hbw_array<float>(27648);
	tensors["conv2_d5_bias"] = new znn::phi::hbw_array<float>(96);
	tensors["Deconvolution3_kernel"] = new znn::phi::hbw_array<float>(12288);
	tensors["Deconvolution3_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["conv2_d3_kernel"] = new znn::phi::hbw_array<float>(12288);
	tensors["conv2_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv2_d1_kernel"] = new znn::phi::hbw_array<float>(14400);
	tensors["conv2_d1_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["score_kernel"] = new znn::phi::hbw_array<float>(6400);
	tensors["score_bias"] = new znn::phi::hbw_array<float>(8);
	tensors["conv4_d2_kernel"] = new znn::phi::hbw_array<float>(20736);
	tensors["conv4_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["conv6_d1_kernel"] = new znn::phi::hbw_array<float>(14400);
	tensors["conv6_d1_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["convf6_d3_kernel"] = new znn::phi::hbw_array<float>(36864);
	tensors["convf6_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv6_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv6_d0_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["deconv_d3_kernel"] = new znn::phi::hbw_array<float>(5120);
	tensors["deconv_d3_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["conv5_d2_kernel"] = new znn::phi::hbw_array<float>(6912);
	tensors["conv5_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["conv5_d3_kernel"] = new znn::phi::hbw_array<float>(12288);
	tensors["conv5_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv5_d1_kernel"] = new znn::phi::hbw_array<float>(14400);
	tensors["conv5_d1_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["conv5_d4_kernel"] = new znn::phi::hbw_array<float>(19200);
	tensors["conv5_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv1_d4_kernel"] = new znn::phi::hbw_array<float>(19200);
	tensors["conv1_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv1_d5_kernel"] = new znn::phi::hbw_array<float>(27648);
	tensors["conv1_d5_bias"] = new znn::phi::hbw_array<float>(96);
	tensors["conv1_d2_kernel"] = new znn::phi::hbw_array<float>(6912);
	tensors["conv1_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["conv1_d3_kernel"] = new znn::phi::hbw_array<float>(12288);
	tensors["conv1_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv1_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv1_d0_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["conv1_d1_kernel"] = new znn::phi::hbw_array<float>(14400);
	tensors["conv1_d1_bias"] = new znn::phi::hbw_array<float>(40);
	tensors["convi_kernel"] = new znn::phi::hbw_array<float>(6400);
	tensors["convi_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["conv7_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv7_d0_bias"] = new znn::phi::hbw_array<float>(32);
	tensors["convf1_d3_kernel"] = new znn::phi::hbw_array<float>(36864);
	tensors["convf1_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["convf1_d2_kernel"] = new znn::phi::hbw_array<float>(20736);
	tensors["convf1_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["convf1_d5_kernel"] = new znn::phi::hbw_array<float>(82944);
	tensors["convf1_d5_bias"] = new znn::phi::hbw_array<float>(96);
	tensors["convf1_d4_kernel"] = new znn::phi::hbw_array<float>(57600);
	tensors["convf1_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["convf2_d4_kernel"] = new znn::phi::hbw_array<float>(57600);
	tensors["convf2_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["convf2_d5_kernel"] = new znn::phi::hbw_array<float>(82944);
	tensors["convf2_d5_bias"] = new znn::phi::hbw_array<float>(96);
	tensors["convf2_d2_kernel"] = new znn::phi::hbw_array<float>(20736);
	tensors["convf2_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["convf2_d3_kernel"] = new znn::phi::hbw_array<float>(36864);
	tensors["convf2_d3_bias"] = new znn::phi::hbw_array<float>(64);
	tensors["conv2_d4_kernel"] = new znn::phi::hbw_array<float>(19200);
	tensors["conv2_d4_bias"] = new znn::phi::hbw_array<float>(80);
	tensors["conv2_d2_kernel"] = new znn::phi::hbw_array<float>(6912);
	tensors["conv2_d2_bias"] = new znn::phi::hbw_array<float>(48);
	tensors["conv2_d0_kernel"] = new znn::phi::hbw_array<float>(9216);
	tensors["conv2_d0_bias"] = new znn::phi::hbw_array<float>(32);
	
	readArrayFromFile(tensors["conv0_d1_kernel"]->data(), "./bin/conv0_d1_kernel.data");
	tensors["conv0_d1_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv0_d0_kernel"]->data(), "./bin/conv0_d0_kernel.data");
	tensors["conv0_d0_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv0_d3_kernel"]->data(), "./bin/conv0_d3_kernel.data");
	tensors["conv0_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv0_d2_kernel"]->data(), "./bin/conv0_d2_kernel.data");
	tensors["conv0_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv0_d5_kernel"]->data(), "./bin/conv0_d5_kernel.data");
	tensors["conv0_d5_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv0_d4_kernel"]->data(), "./bin/conv0_d4_kernel.data");
	tensors["conv0_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv4_d3_kernel"]->data(), "./bin/conv4_d3_kernel.data");
	tensors["conv4_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv4_d4_kernel"]->data(), "./bin/conv4_d4_kernel.data");
	tensors["conv4_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv4_d1_kernel"]->data(), "./bin/conv4_d1_kernel.data");
	tensors["conv4_d1_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv5_d0_kernel"]->data(), "./bin/conv5_d0_kernel.data");
	tensors["conv5_d0_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv4_d0_kernel"]->data(), "./bin/conv4_d0_kernel.data");
	tensors["conv4_d0_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv6_d3_kernel"]->data(), "./bin/conv6_d3_kernel.data");
	tensors["conv6_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv6_d2_kernel"]->data(), "./bin/conv6_d2_kernel.data");
	tensors["conv6_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf6_d2_kernel"]->data(), "./bin/convf6_d2_kernel.data");
	tensors["convf6_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf6_d4_kernel"]->data(), "./bin/convf6_d4_kernel.data");
	tensors["convf6_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv6_d4_kernel"]->data(), "./bin/conv6_d4_kernel.data");
	tensors["conv6_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf5_d4_kernel"]->data(), "./bin/convf5_d4_kernel.data");
	tensors["convf5_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf5_d3_kernel"]->data(), "./bin/convf5_d3_kernel.data");
	tensors["convf5_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf5_d2_kernel"]->data(), "./bin/convf5_d2_kernel.data");
	tensors["convf5_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv2_d5_kernel"]->data(), "./bin/conv2_d5_kernel.data");
	tensors["conv2_d5_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv2_d3_kernel"]->data(), "./bin/conv2_d3_kernel.data");
	tensors["conv2_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv2_d1_kernel"]->data(), "./bin/conv2_d1_kernel.data");
	tensors["conv2_d1_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv4_d2_kernel"]->data(), "./bin/conv4_d2_kernel.data");
	tensors["conv4_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv6_d1_kernel"]->data(), "./bin/conv6_d1_kernel.data");
	tensors["conv6_d1_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf6_d3_kernel"]->data(), "./bin/convf6_d3_kernel.data");
	tensors["convf6_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv6_d0_kernel"]->data(), "./bin/conv6_d0_kernel.data");
	tensors["conv6_d0_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv5_d2_kernel"]->data(), "./bin/conv5_d2_kernel.data");
	tensors["conv5_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv5_d3_kernel"]->data(), "./bin/conv5_d3_kernel.data");
	tensors["conv5_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv5_d1_kernel"]->data(), "./bin/conv5_d1_kernel.data");
	tensors["conv5_d1_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv5_d4_kernel"]->data(), "./bin/conv5_d4_kernel.data");
	tensors["conv5_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv1_d4_kernel"]->data(), "./bin/conv1_d4_kernel.data");
	tensors["conv1_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv1_d5_kernel"]->data(), "./bin/conv1_d5_kernel.data");
	tensors["conv1_d5_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv1_d2_kernel"]->data(), "./bin/conv1_d2_kernel.data");
	tensors["conv1_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv1_d3_kernel"]->data(), "./bin/conv1_d3_kernel.data");
	tensors["conv1_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv1_d0_kernel"]->data(), "./bin/conv1_d0_kernel.data");
	tensors["conv1_d0_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv1_d1_kernel"]->data(), "./bin/conv1_d1_kernel.data");
	tensors["conv1_d1_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convi_kernel"]->data(), "./bin/convi_kernel.data");
	readArrayFromFile(tensors["convi_bias"]->data(), "./bin/convi_bias.data");
	readArrayFromFile(tensors["conv7_d0_kernel"]->data(), "./bin/conv7_d0_kernel.data");
	readArrayFromFile(tensors["conv7_d0_bias"]->data(), "./bin/conv7_d0_bias.data");
	readArrayFromFile(tensors["convf1_d3_kernel"]->data(), "./bin/convf1_d3_kernel.data");
	tensors["convf1_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf1_d2_kernel"]->data(), "./bin/convf1_d2_kernel.data");
	tensors["convf1_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf1_d5_kernel"]->data(), "./bin/convf1_d5_kernel.data");
	tensors["convf1_d5_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf1_d4_kernel"]->data(), "./bin/convf1_d4_kernel.data");
	tensors["convf1_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf2_d4_kernel"]->data(), "./bin/convf2_d4_kernel.data");
	tensors["convf2_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf2_d5_kernel"]->data(), "./bin/convf2_d5_kernel.data");
	tensors["convf2_d5_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf2_d2_kernel"]->data(), "./bin/convf2_d2_kernel.data");
	tensors["convf2_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["convf2_d3_kernel"]->data(), "./bin/convf2_d3_kernel.data");
	tensors["convf2_d3_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv2_d4_kernel"]->data(), "./bin/conv2_d4_kernel.data");
	tensors["conv2_d4_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv2_d2_kernel"]->data(), "./bin/conv2_d2_kernel.data");
	tensors["conv2_d2_bias"]->set_to_const(0);
	readArrayFromFile(tensors["conv2_d0_kernel"]->data(), "./bin/conv2_d0_kernel.data");
	tensors["conv2_d0_bias"]->set_to_const(0);
	
	layers["conv0_d1"] = new znn::phi::ConvWrapper(1, 28, 36, 18, 96, 1, 3, 0, 1);
	layers["conv0_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	layers["conv0_d3"] = new znn::phi::ConvWrapper(1, 48, 64, 18, 24, 1, 3, 0, 1);
	layers["conv0_d2"] = new znn::phi::ConvWrapper(1, 36, 48, 18, 48, 1, 3, 0, 1);
	layers["conv0_d5"] = new znn::phi::ConvWrapper(1, 80, 96, 18, 6, 1, 3, 0, 1);
	layers["conv0_d4"] = new znn::phi::ConvWrapper(1, 64, 80, 18, 12, 1, 3, 0, 1);
	layers["conv4_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 1, 3, 0, 1);
	layers["conv4_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 1, 3, 0, 1);
	layers["conv4_d1"] = new znn::phi::ConvWrapper(1, 36, 36, 18, 96, 1, 3, 0, 1);
	layers["conv5_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	layers["conv4_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	layers["conv6_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 3, 1, 1, 0);
	layers["conv6_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 3, 1, 1, 0);
	layers["convf6_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 1, 3, 0, 1);
	layers["convf6_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 1, 3, 0, 1);
	layers["conv6_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 3, 1, 1, 0);
	layers["convf5_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 1, 3, 0, 1);
	layers["convf5_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 1, 3, 0, 1);
	layers["convf5_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 1, 3, 0, 1);
	layers["conv2_d5"] = new znn::phi::ConvWrapper(1, 96, 96, 18, 6, 3, 1, 1, 0);
	layers["conv2_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 3, 1, 1, 0);
	layers["conv2_d1"] = new znn::phi::ConvWrapper(1, 36, 36, 18, 96, 1, 3, 0, 1);
	layers["conv4_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 1, 3, 0, 1);
	layers["conv6_d1"] = new znn::phi::ConvWrapper(1, 36, 36, 18, 96, 1, 3, 0, 1);
	layers["convf6_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 1, 3, 0, 1);
	layers["block_input"] = new znn::phi::BlockDataLayer(1, 1, 18, 192);
	layers["conv6_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	layers["conv5_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 3, 1, 1, 0);
	layers["conv5_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 3, 1, 1, 0);
	layers["conv5_d1"] = new znn::phi::ConvWrapper(1, 36, 36, 18, 96, 1, 3, 0, 1);
	layers["conv5_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 3, 1, 1, 0);
	layers["conv1_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 3, 1, 1, 0);
	layers["conv1_d5"] = new znn::phi::ConvWrapper(1, 96, 96, 18, 6, 3, 1, 1, 0);
	layers["conv1_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 3, 1, 1, 0);
	layers["conv1_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 3, 1, 1, 0);
	layers["conv1_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	layers["conv1_d1"] = new znn::phi::ConvWrapper(1, 36, 36, 18, 96, 1, 3, 0, 1);
	layers["convi"] = new znn::phi::ConvWrapper(1, 1, 28, 18, 192, 1, 5, 0, 2);
	layers["conv7_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	layers["unblock_output"] = new znn::phi::UnblockDataLayer(1, 3, 18, 192);
	layers["convf1_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 1, 3, 0, 1);
	layers["convf1_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 1, 3, 0, 1);
	layers["convf1_d5"] = new znn::phi::ConvWrapper(1, 96, 96, 18, 6, 1, 3, 0, 1);
	layers["convf1_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 1, 3, 0, 1);
	layers["convf2_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 1, 3, 0, 1);
	layers["convf2_d5"] = new znn::phi::ConvWrapper(1, 96, 96, 18, 6, 1, 3, 0, 1);
	layers["convf2_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 1, 3, 0, 1);
	layers["convf2_d3"] = new znn::phi::ConvWrapper(1, 64, 64, 18, 24, 1, 3, 0, 1);
	layers["conv2_d4"] = new znn::phi::ConvWrapper(1, 80, 80, 18, 12, 3, 1, 1, 0);
	layers["conv2_d2"] = new znn::phi::ConvWrapper(1, 48, 48, 18, 48, 3, 1, 1, 0);
	layers["conv2_d0"] = new znn::phi::ConvWrapper(1, 28, 28, 18, 192, 1, 3, 0, 1);
	
	
}


void znn::phi::Znet::forward(void)
{
	readArrayFromFile(tensors["user_input"]->data(), "./bin/user_input.data");
	auto begin = std::chrono::high_resolution_clock::now();
	for (int i = 0; i < 20; i++) {
		std::cout << "Starting Forward Pass\n";
		std::cout << "Running block_input!\n";
		layers["block_input"]->forward(tensors["user_input"]->data(), tensors["input"]->data(), NULL, NULL);
		std::cout << "block_input Finished!\n";
		std::cout << "Running convi!\n";
		layers["convi"]->forward(tensors["input"]->data(), tensors["convi"]->data(), tensors["convi_kernel"]->data(), tensors["convi_bias"]->data());
		std::cout << "convi Finished!\n";
		std::cout << "Running elui!\n";
		std::cout << "elui Finished!\n";
		std::cout << "Running conv0_d0!\n";
		layers["conv0_d0"]->forward(tensors["convi"]->data(), tensors["conv0_d0"]->data(), tensors["conv0_d0_kernel"]->data(), tensors["conv0_d0_bias"]->data());
		std::cout << "conv0_d0 Finished!\n";
		std::cout << "Running bn0_d0!\n";
		std::cout << "bn0_d0 Finished!\n";
		std::cout << "Running scale0_d0!\n";
		std::cout << "scale0_d0 Finished!\n";
		std::cout << "Running elu0_d0!\n";
		std::cout << "elu0_d0 Finished!\n";
		std::cout << "Running conv1_d0!\n";
		layers["conv1_d0"]->forward(tensors["conv0_d0"]->data(), tensors["conv1_d0"]->data(), tensors["conv1_d0_kernel"]->data(), tensors["conv1_d0_bias"]->data());
		std::cout << "conv1_d0 Finished!\n";
		std::cout << "Running bn1_d0!\n";
		std::cout << "bn1_d0 Finished!\n";
		std::cout << "Running scale1_d0!\n";
		std::cout << "scale1_d0 Finished!\n";
		std::cout << "Running elu1_d0!\n";
		std::cout << "elu1_d0 Finished!\n";
		std::cout << "Running conv2_d0!\n";
		layers["conv2_d0"]->forward(tensors["conv1_d0"]->data(), tensors["conv2_d0"]->data(), tensors["conv2_d0_kernel"]->data(), tensors["conv2_d0_bias"]->data());
		std::cout << "conv2_d0 Finished!\n";
		std::cout << "Running sum0_d0!\n";
		std::cout << "sum0_d0 Finished!\n";
		std::cout << "Running bn2_d0!\n";
		std::cout << "bn2_d0 Finished!\n";
		std::cout << "Running scale2_d0!\n";
		std::cout << "scale2_d0 Finished!\n";
		std::cout << "Running elu2_d0!\n";
		std::cout << "elu2_d0 Finished!\n";
		std::cout << "Running pool_d1!\n";
		std::cout << "pool_d1 Finished!\n";
		std::cout << "Running conv0_d1!\n";
		layers["conv0_d1"]->forward(tensors["pool_d1"]->data(), tensors["conv0_d1"]->data(), tensors["conv0_d1_kernel"]->data(), tensors["conv0_d1_bias"]->data());
		std::cout << "conv0_d1 Finished!\n";
		std::cout << "Running bn0_d1!\n";
		std::cout << "bn0_d1 Finished!\n";
		std::cout << "Running scale0_d1!\n";
		std::cout << "scale0_d1 Finished!\n";
		std::cout << "Running elu0_d1!\n";
		std::cout << "elu0_d1 Finished!\n";
		std::cout << "Running conv1_d1!\n";
		layers["conv1_d1"]->forward(tensors["conv0_d1"]->data(), tensors["conv1_d1"]->data(), tensors["conv1_d1_kernel"]->data(), tensors["conv1_d1_bias"]->data());
		std::cout << "conv1_d1 Finished!\n";
		std::cout << "Running bn1_d1!\n";
		std::cout << "bn1_d1 Finished!\n";
		std::cout << "Running scale1_d1!\n";
		std::cout << "scale1_d1 Finished!\n";
		std::cout << "Running elu1_d1!\n";
		std::cout << "elu1_d1 Finished!\n";
		std::cout << "Running conv2_d1!\n";
		layers["conv2_d1"]->forward(tensors["conv1_d1"]->data(), tensors["conv2_d1"]->data(), tensors["conv2_d1_kernel"]->data(), tensors["conv2_d1_bias"]->data());
		std::cout << "conv2_d1 Finished!\n";
		std::cout << "Running sum0_d1!\n";
		std::cout << "sum0_d1 Finished!\n";
		std::cout << "Running bn2_d1!\n";
		std::cout << "bn2_d1 Finished!\n";
		std::cout << "Running scale2_d1!\n";
		std::cout << "scale2_d1 Finished!\n";
		std::cout << "Running elu2_d1!\n";
		std::cout << "elu2_d1 Finished!\n";
		std::cout << "Running pool_d2!\n";
		std::cout << "pool_d2 Finished!\n";
		std::cout << "Running conv0_d2!\n";
		layers["conv0_d2"]->forward(tensors["pool_d2"]->data(), tensors["conv0_d2"]->data(), tensors["conv0_d2_kernel"]->data(), tensors["conv0_d2_bias"]->data());
		std::cout << "conv0_d2 Finished!\n";
		std::cout << "Running bn0_d2!\n";
		std::cout << "bn0_d2 Finished!\n";
		std::cout << "Running scale0_d2!\n";
		std::cout << "scale0_d2 Finished!\n";
		std::cout << "Running elu0_d2!\n";
		std::cout << "elu0_d2 Finished!\n";
		std::cout << "Running convf1_d2!\n";
		layers["convf1_d2"]->forward(tensors["conv0_d2"]->data(), tensors["convf1_d2"]->data(), tensors["convf1_d2_kernel"]->data(), tensors["convf1_d2_bias"]->data());
		std::cout << "convf1_d2 Finished!\n";
		std::cout << "Running conv1_d2!\n";
		layers["conv1_d2"]->forward(tensors["convf1_d2"]->data(), tensors["conv1_d2"]->data(), tensors["conv1_d2_kernel"]->data(), tensors["conv1_d2_bias"]->data());
		std::cout << "conv1_d2 Finished!\n";
		std::cout << "Running bn1_d2!\n";
		std::cout << "bn1_d2 Finished!\n";
		std::cout << "Running scale1_d2!\n";
		std::cout << "scale1_d2 Finished!\n";
		std::cout << "Running elu1_d2!\n";
		std::cout << "elu1_d2 Finished!\n";
		std::cout << "Running convf2_d2!\n";
		layers["convf2_d2"]->forward(tensors["conv1_d2"]->data(), tensors["convf2_d2"]->data(), tensors["convf2_d2_kernel"]->data(), tensors["convf2_d2_bias"]->data());
		std::cout << "convf2_d2 Finished!\n";
		std::cout << "Running conv2_d2!\n";
		layers["conv2_d2"]->forward(tensors["convf2_d2"]->data(), tensors["conv2_d2"]->data(), tensors["conv2_d2_kernel"]->data(), tensors["conv2_d2_bias"]->data());
		std::cout << "conv2_d2 Finished!\n";
		std::cout << "Running sum0_d2!\n";
		std::cout << "sum0_d2 Finished!\n";
		std::cout << "Running bn2_d2!\n";
		std::cout << "bn2_d2 Finished!\n";
		std::cout << "Running scale2_d2!\n";
		std::cout << "scale2_d2 Finished!\n";
		std::cout << "Running elu2_d2!\n";
		std::cout << "elu2_d2 Finished!\n";
		std::cout << "Running pool_d3!\n";
		std::cout << "pool_d3 Finished!\n";
		std::cout << "Running conv0_d3!\n";
		layers["conv0_d3"]->forward(tensors["pool_d3"]->data(), tensors["conv0_d3"]->data(), tensors["conv0_d3_kernel"]->data(), tensors["conv0_d3_bias"]->data());
		std::cout << "conv0_d3 Finished!\n";
		std::cout << "Running BatchNorm1!\n";
		std::cout << "BatchNorm1 Finished!\n";
		std::cout << "Running Scale1!\n";
		std::cout << "Scale1 Finished!\n";
		std::cout << "Running ELU1!\n";
		std::cout << "ELU1 Finished!\n";
		std::cout << "Running convf1_d3!\n";
		layers["convf1_d3"]->forward(tensors["conv0_d3"]->data(), tensors["convf1_d3"]->data(), tensors["convf1_d3_kernel"]->data(), tensors["convf1_d3_bias"]->data());
		std::cout << "convf1_d3 Finished!\n";
		std::cout << "Running conv1_d3!\n";
		layers["conv1_d3"]->forward(tensors["convf1_d3"]->data(), tensors["conv1_d3"]->data(), tensors["conv1_d3_kernel"]->data(), tensors["conv1_d3_bias"]->data());
		std::cout << "conv1_d3 Finished!\n";
		std::cout << "Running BatchNorm2!\n";
		std::cout << "BatchNorm2 Finished!\n";
		std::cout << "Running Scale2!\n";
		std::cout << "Scale2 Finished!\n";
		std::cout << "Running ELU2!\n";
		std::cout << "ELU2 Finished!\n";
		std::cout << "Running convf2_d3!\n";
		layers["convf2_d3"]->forward(tensors["conv1_d3"]->data(), tensors["convf2_d3"]->data(), tensors["convf2_d3_kernel"]->data(), tensors["convf2_d3_bias"]->data());
		std::cout << "convf2_d3 Finished!\n";
		std::cout << "Running conv2_d3!\n";
		layers["conv2_d3"]->forward(tensors["convf2_d3"]->data(), tensors["conv2_d3"]->data(), tensors["conv2_d3_kernel"]->data(), tensors["conv2_d3_bias"]->data());
		std::cout << "conv2_d3 Finished!\n";
		std::cout << "Running sum0_d3!\n";
		std::cout << "sum0_d3 Finished!\n";
		std::cout << "Running BatchNorm3!\n";
		std::cout << "BatchNorm3 Finished!\n";
		std::cout << "Running Scale3!\n";
		std::cout << "Scale3 Finished!\n";
		std::cout << "Running ELU3!\n";
		std::cout << "ELU3 Finished!\n";
		std::cout << "Running pool_d4!\n";
		std::cout << "pool_d4 Finished!\n";
		std::cout << "Running conv0_d4!\n";
		layers["conv0_d4"]->forward(tensors["pool_d4"]->data(), tensors["conv0_d4"]->data(), tensors["conv0_d4_kernel"]->data(), tensors["conv0_d4_bias"]->data());
		std::cout << "conv0_d4 Finished!\n";
		std::cout << "Running bn0_d4!\n";
		std::cout << "bn0_d4 Finished!\n";
		std::cout << "Running scale0_d4!\n";
		std::cout << "scale0_d4 Finished!\n";
		std::cout << "Running elu0_d4!\n";
		std::cout << "elu0_d4 Finished!\n";
		std::cout << "Running convf1_d4!\n";
		layers["convf1_d4"]->forward(tensors["conv0_d4"]->data(), tensors["convf1_d4"]->data(), tensors["convf1_d4_kernel"]->data(), tensors["convf1_d4_bias"]->data());
		std::cout << "convf1_d4 Finished!\n";
		std::cout << "Running conv1_d4!\n";
		layers["conv1_d4"]->forward(tensors["convf1_d4"]->data(), tensors["conv1_d4"]->data(), tensors["conv1_d4_kernel"]->data(), tensors["conv1_d4_bias"]->data());
		std::cout << "conv1_d4 Finished!\n";
		std::cout << "Running bn1_d4!\n";
		std::cout << "bn1_d4 Finished!\n";
		std::cout << "Running scale1_d4!\n";
		std::cout << "scale1_d4 Finished!\n";
		std::cout << "Running elu1_d4!\n";
		std::cout << "elu1_d4 Finished!\n";
		std::cout << "Running convf2_d4!\n";
		layers["convf2_d4"]->forward(tensors["conv1_d4"]->data(), tensors["convf2_d4"]->data(), tensors["convf2_d4_kernel"]->data(), tensors["convf2_d4_bias"]->data());
		std::cout << "convf2_d4 Finished!\n";
		std::cout << "Running conv2_d4!\n";
		layers["conv2_d4"]->forward(tensors["convf2_d4"]->data(), tensors["conv2_d4"]->data(), tensors["conv2_d4_kernel"]->data(), tensors["conv2_d4_bias"]->data());
		std::cout << "conv2_d4 Finished!\n";
		std::cout << "Running sum0_d4!\n";
		std::cout << "sum0_d4 Finished!\n";
		std::cout << "Running bn2_d4!\n";
		std::cout << "bn2_d4 Finished!\n";
		std::cout << "Running scale2_d4!\n";
		std::cout << "scale2_d4 Finished!\n";
		std::cout << "Running elu2_d4!\n";
		std::cout << "elu2_d4 Finished!\n";
		std::cout << "Running pool_d5!\n";
		std::cout << "pool_d5 Finished!\n";
		std::cout << "Running conv0_d5!\n";
		layers["conv0_d5"]->forward(tensors["pool_d5"]->data(), tensors["conv0_d5"]->data(), tensors["conv0_d5_kernel"]->data(), tensors["conv0_d5_bias"]->data());
		std::cout << "conv0_d5 Finished!\n";
		std::cout << "Running bn0_d5!\n";
		std::cout << "bn0_d5 Finished!\n";
		std::cout << "Running scale0_d5!\n";
		std::cout << "scale0_d5 Finished!\n";
		std::cout << "Running elu0_d5!\n";
		std::cout << "elu0_d5 Finished!\n";
		std::cout << "Running convf1_d5!\n";
		layers["convf1_d5"]->forward(tensors["conv0_d5"]->data(), tensors["convf1_d5"]->data(), tensors["convf1_d5_kernel"]->data(), tensors["convf1_d5_bias"]->data());
		std::cout << "convf1_d5 Finished!\n";
		std::cout << "Running conv1_d5!\n";
		layers["conv1_d5"]->forward(tensors["convf1_d5"]->data(), tensors["conv1_d5"]->data(), tensors["conv1_d5_kernel"]->data(), tensors["conv1_d5_bias"]->data());
		std::cout << "conv1_d5 Finished!\n";
		std::cout << "Running bn1_d5!\n";
		std::cout << "bn1_d5 Finished!\n";
		std::cout << "Running scale1_d5!\n";
		std::cout << "scale1_d5 Finished!\n";
		std::cout << "Running elu1_d5!\n";
		std::cout << "elu1_d5 Finished!\n";
		std::cout << "Running convf2_d5!\n";
		layers["convf2_d5"]->forward(tensors["conv1_d5"]->data(), tensors["convf2_d5"]->data(), tensors["convf2_d5_kernel"]->data(), tensors["convf2_d5_bias"]->data());
		std::cout << "convf2_d5 Finished!\n";
		std::cout << "Running conv2_d5!\n";
		layers["conv2_d5"]->forward(tensors["convf2_d5"]->data(), tensors["conv2_d5"]->data(), tensors["conv2_d5_kernel"]->data(), tensors["conv2_d5_bias"]->data());
		std::cout << "conv2_d5 Finished!\n";
		std::cout << "Running sum0_d5!\n";
		std::cout << "sum0_d5 Finished!\n";
		std::cout << "Running bn2_d5!\n";
		std::cout << "bn2_d5 Finished!\n";
		std::cout << "Running scale2_d5!\n";
		std::cout << "scale2_d5 Finished!\n";
		std::cout << "Running elu2_d5!\n";
		std::cout << "elu2_d5 Finished!\n";
		std::cout << "Running Deconvolution1!\n";
		std::cout << "Deconvolution1 Finished!\n";
		std::cout << "Running Eltwise1!\n";
		std::cout << "Eltwise1 Finished!\n";
		std::cout << "Running BatchNorm4!\n";
		std::cout << "BatchNorm4 Finished!\n";
		std::cout << "Running Scale4!\n";
		std::cout << "Scale4 Finished!\n";
		std::cout << "Running ELU4!\n";
		std::cout << "ELU4 Finished!\n";
		std::cout << "Running conv4_d4!\n";
		layers["conv4_d4"]->forward(tensors["Eltwise1"]->data(), tensors["conv4_d4"]->data(), tensors["conv4_d4_kernel"]->data(), tensors["conv4_d4_bias"]->data());
		std::cout << "conv4_d4 Finished!\n";
		std::cout << "Running bn4_d4!\n";
		std::cout << "bn4_d4 Finished!\n";
		std::cout << "Running scale4_d4!\n";
		std::cout << "scale4_d4 Finished!\n";
		std::cout << "Running elu4_d4!\n";
		std::cout << "elu4_d4 Finished!\n";
		std::cout << "Running convf5_d4!\n";
		layers["convf5_d4"]->forward(tensors["conv4_d4"]->data(), tensors["convf5_d4"]->data(), tensors["convf5_d4_kernel"]->data(), tensors["convf5_d4_bias"]->data());
		std::cout << "convf5_d4 Finished!\n";
		std::cout << "Running conv5_d4!\n";
		layers["conv5_d4"]->forward(tensors["convf5_d4"]->data(), tensors["conv5_d4"]->data(), tensors["conv5_d4_kernel"]->data(), tensors["conv5_d4_bias"]->data());
		std::cout << "conv5_d4 Finished!\n";
		std::cout << "Running bn5_d4!\n";
		std::cout << "bn5_d4 Finished!\n";
		std::cout << "Running scale5_d4!\n";
		std::cout << "scale5_d4 Finished!\n";
		std::cout << "Running elu5_d4!\n";
		std::cout << "elu5_d4 Finished!\n";
		std::cout << "Running convf6_d4!\n";
		layers["convf6_d4"]->forward(tensors["conv5_d4"]->data(), tensors["convf6_d4"]->data(), tensors["convf6_d4_kernel"]->data(), tensors["convf6_d4_bias"]->data());
		std::cout << "convf6_d4 Finished!\n";
		std::cout << "Running conv6_d4!\n";
		layers["conv6_d4"]->forward(tensors["convf6_d4"]->data(), tensors["conv6_d4"]->data(), tensors["conv6_d4_kernel"]->data(), tensors["conv6_d4_bias"]->data());
		std::cout << "conv6_d4 Finished!\n";
		std::cout << "Running sum4_d4!\n";
		std::cout << "sum4_d4 Finished!\n";
		std::cout << "Running bn6_d4!\n";
		std::cout << "bn6_d4 Finished!\n";
		std::cout << "Running scale6_d4!\n";
		std::cout << "scale6_d4 Finished!\n";
		std::cout << "Running elu6_d4!\n";
		std::cout << "elu6_d4 Finished!\n";
		std::cout << "Running Deconvolution2!\n";
		std::cout << "Deconvolution2 Finished!\n";
		std::cout << "Running Eltwise2!\n";
		std::cout << "Eltwise2 Finished!\n";
		std::cout << "Running bn3_d3!\n";
		std::cout << "bn3_d3 Finished!\n";
		std::cout << "Running scale3_d3!\n";
		std::cout << "scale3_d3 Finished!\n";
		std::cout << "Running elu3_d3!\n";
		std::cout << "elu3_d3 Finished!\n";
		std::cout << "Running conv4_d3!\n";
		layers["conv4_d3"]->forward(tensors["Eltwise2"]->data(), tensors["conv4_d3"]->data(), tensors["conv4_d3_kernel"]->data(), tensors["conv4_d3_bias"]->data());
		std::cout << "conv4_d3 Finished!\n";
		std::cout << "Running bn4_d3!\n";
		std::cout << "bn4_d3 Finished!\n";
		std::cout << "Running scale4_d3!\n";
		std::cout << "scale4_d3 Finished!\n";
		std::cout << "Running elu4_d3!\n";
		std::cout << "elu4_d3 Finished!\n";
		std::cout << "Running convf5_d3!\n";
		layers["convf5_d3"]->forward(tensors["conv4_d3"]->data(), tensors["convf5_d3"]->data(), tensors["convf5_d3_kernel"]->data(), tensors["convf5_d3_bias"]->data());
		std::cout << "convf5_d3 Finished!\n";
		std::cout << "Running conv5_d3!\n";
		layers["conv5_d3"]->forward(tensors["convf5_d3"]->data(), tensors["conv5_d3"]->data(), tensors["conv5_d3_kernel"]->data(), tensors["conv5_d3_bias"]->data());
		std::cout << "conv5_d3 Finished!\n";
		std::cout << "Running bn5_d3!\n";
		std::cout << "bn5_d3 Finished!\n";
		std::cout << "Running scale5_d3!\n";
		std::cout << "scale5_d3 Finished!\n";
		std::cout << "Running elu5_d3!\n";
		std::cout << "elu5_d3 Finished!\n";
		std::cout << "Running convf6_d3!\n";
		layers["convf6_d3"]->forward(tensors["conv5_d3"]->data(), tensors["convf6_d3"]->data(), tensors["convf6_d3_kernel"]->data(), tensors["convf6_d3_bias"]->data());
		std::cout << "convf6_d3 Finished!\n";
		std::cout << "Running conv6_d3!\n";
		layers["conv6_d3"]->forward(tensors["convf6_d3"]->data(), tensors["conv6_d3"]->data(), tensors["conv6_d3_kernel"]->data(), tensors["conv6_d3_bias"]->data());
		std::cout << "conv6_d3 Finished!\n";
		std::cout << "Running sum4_d3!\n";
		std::cout << "sum4_d3 Finished!\n";
		std::cout << "Running bn6_d3!\n";
		std::cout << "bn6_d3 Finished!\n";
		std::cout << "Running scale6_d3!\n";
		std::cout << "scale6_d3 Finished!\n";
		std::cout << "Running elu6_d3!\n";
		std::cout << "elu6_d3 Finished!\n";
		std::cout << "Running Deconvolution3!\n";
		std::cout << "Deconvolution3 Finished!\n";
		std::cout << "Running Eltwise3!\n";
		std::cout << "Eltwise3 Finished!\n";
		std::cout << "Running bn2_d3!\n";
		std::cout << "bn2_d3 Finished!\n";
		std::cout << "Running scale2_d3!\n";
		std::cout << "scale2_d3 Finished!\n";
		std::cout << "Running elu2_d3!\n";
		std::cout << "elu2_d3 Finished!\n";
		std::cout << "Running conv4_d2!\n";
		layers["conv4_d2"]->forward(tensors["Eltwise3"]->data(), tensors["conv4_d2"]->data(), tensors["conv4_d2_kernel"]->data(), tensors["conv4_d2_bias"]->data());
		std::cout << "conv4_d2 Finished!\n";
		std::cout << "Running bn4_d2!\n";
		std::cout << "bn4_d2 Finished!\n";
		std::cout << "Running scale4_d2!\n";
		std::cout << "scale4_d2 Finished!\n";
		std::cout << "Running elu4_d2!\n";
		std::cout << "elu4_d2 Finished!\n";
		std::cout << "Running convf5_d2!\n";
		layers["convf5_d2"]->forward(tensors["conv4_d2"]->data(), tensors["convf5_d2"]->data(), tensors["convf5_d2_kernel"]->data(), tensors["convf5_d2_bias"]->data());
		std::cout << "convf5_d2 Finished!\n";
		std::cout << "Running conv5_d2!\n";
		layers["conv5_d2"]->forward(tensors["convf5_d2"]->data(), tensors["conv5_d2"]->data(), tensors["conv5_d2_kernel"]->data(), tensors["conv5_d2_bias"]->data());
		std::cout << "conv5_d2 Finished!\n";
		std::cout << "Running bn5_d2!\n";
		std::cout << "bn5_d2 Finished!\n";
		std::cout << "Running scale5_d2!\n";
		std::cout << "scale5_d2 Finished!\n";
		std::cout << "Running elu5_d2!\n";
		std::cout << "elu5_d2 Finished!\n";
		std::cout << "Running convf6_d2!\n";
		layers["convf6_d2"]->forward(tensors["conv5_d2"]->data(), tensors["convf6_d2"]->data(), tensors["convf6_d2_kernel"]->data(), tensors["convf6_d2_bias"]->data());
		std::cout << "convf6_d2 Finished!\n";
		std::cout << "Running conv6_d2!\n";
		layers["conv6_d2"]->forward(tensors["convf6_d2"]->data(), tensors["conv6_d2"]->data(), tensors["conv6_d2_kernel"]->data(), tensors["conv6_d2_bias"]->data());
		std::cout << "conv6_d2 Finished!\n";
		std::cout << "Running sum4_d2!\n";
		std::cout << "sum4_d2 Finished!\n";
		std::cout << "Running bn6_d2!\n";
		std::cout << "bn6_d2 Finished!\n";
		std::cout << "Running scale6_d2!\n";
		std::cout << "scale6_d2 Finished!\n";
		std::cout << "Running elu6_d2!\n";
		std::cout << "elu6_d2 Finished!\n";
		std::cout << "Running Deconvolution4!\n";
		std::cout << "Deconvolution4 Finished!\n";
		std::cout << "Running Eltwise4!\n";
		std::cout << "Eltwise4 Finished!\n";
		std::cout << "Running bn1_d3!\n";
		std::cout << "bn1_d3 Finished!\n";
		std::cout << "Running scale1_d3!\n";
		std::cout << "scale1_d3 Finished!\n";
		std::cout << "Running elu1_d3!\n";
		std::cout << "elu1_d3 Finished!\n";
		std::cout << "Running conv4_d1!\n";
		layers["conv4_d1"]->forward(tensors["Eltwise4"]->data(), tensors["conv4_d1"]->data(), tensors["conv4_d1_kernel"]->data(), tensors["conv4_d1_bias"]->data());
		std::cout << "conv4_d1 Finished!\n";
		std::cout << "Running bn4_d1!\n";
		std::cout << "bn4_d1 Finished!\n";
		std::cout << "Running scale4_d1!\n";
		std::cout << "scale4_d1 Finished!\n";
		std::cout << "Running elu4_d1!\n";
		std::cout << "elu4_d1 Finished!\n";
		std::cout << "Running conv5_d1!\n";
		layers["conv5_d1"]->forward(tensors["conv4_d1"]->data(), tensors["conv5_d1"]->data(), tensors["conv5_d1_kernel"]->data(), tensors["conv5_d1_bias"]->data());
		std::cout << "conv5_d1 Finished!\n";
		std::cout << "Running bn5_d1!\n";
		std::cout << "bn5_d1 Finished!\n";
		std::cout << "Running scale5_d1!\n";
		std::cout << "scale5_d1 Finished!\n";
		std::cout << "Running elu5_d1!\n";
		std::cout << "elu5_d1 Finished!\n";
		std::cout << "Running conv6_d1!\n";
		layers["conv6_d1"]->forward(tensors["conv5_d1"]->data(), tensors["conv6_d1"]->data(), tensors["conv6_d1_kernel"]->data(), tensors["conv6_d1_bias"]->data());
		std::cout << "conv6_d1 Finished!\n";
		std::cout << "Running sum4_d1!\n";
		std::cout << "sum4_d1 Finished!\n";
		std::cout << "Running bn6_d1!\n";
		std::cout << "bn6_d1 Finished!\n";
		std::cout << "Running scale6_d1!\n";
		std::cout << "scale6_d1 Finished!\n";
		std::cout << "Running elu6_d1!\n";
		std::cout << "elu6_d1 Finished!\n";
		std::cout << "Running deconv_d3!\n";
		std::cout << "deconv_d3 Finished!\n";
		std::cout << "Running merge_d3!\n";
		std::cout << "merge_d3 Finished!\n";
		std::cout << "Running bn0_d3!\n";
		std::cout << "bn0_d3 Finished!\n";
		std::cout << "Running scale0_d3!\n";
		std::cout << "scale0_d3 Finished!\n";
		std::cout << "Running elu0_d3!\n";
		std::cout << "elu0_d3 Finished!\n";
		std::cout << "Running conv4_d0!\n";
		layers["conv4_d0"]->forward(tensors["merge_d3"]->data(), tensors["conv4_d0"]->data(), tensors["conv4_d0_kernel"]->data(), tensors["conv4_d0_bias"]->data());
		std::cout << "conv4_d0 Finished!\n";
		std::cout << "Running bn4_d0!\n";
		std::cout << "bn4_d0 Finished!\n";
		std::cout << "Running scale4_d0!\n";
		std::cout << "scale4_d0 Finished!\n";
		std::cout << "Running elu4_d0!\n";
		std::cout << "elu4_d0 Finished!\n";
		std::cout << "Running conv5_d0!\n";
		layers["conv5_d0"]->forward(tensors["conv4_d0"]->data(), tensors["conv5_d0"]->data(), tensors["conv5_d0_kernel"]->data(), tensors["conv5_d0_bias"]->data());
		std::cout << "conv5_d0 Finished!\n";
		std::cout << "Running bn5_d0!\n";
		std::cout << "bn5_d0 Finished!\n";
		std::cout << "Running scale5_d0!\n";
		std::cout << "scale5_d0 Finished!\n";
		std::cout << "Running elu5_d0!\n";
		std::cout << "elu5_d0 Finished!\n";
		std::cout << "Running conv6_d0!\n";
		layers["conv6_d0"]->forward(tensors["conv5_d0"]->data(), tensors["conv6_d0"]->data(), tensors["conv6_d0_kernel"]->data(), tensors["conv6_d0_bias"]->data());
		std::cout << "conv6_d0 Finished!\n";
		std::cout << "Running sum4_d0!\n";
		std::cout << "sum4_d0 Finished!\n";
		std::cout << "Running bn6_d0!\n";
		std::cout << "bn6_d0 Finished!\n";
		std::cout << "Running scale6_d0!\n";
		std::cout << "scale6_d0 Finished!\n";
		std::cout << "Running elu6_d0!\n";
		std::cout << "elu6_d0 Finished!\n";
		std::cout << "Running conv7_d0!\n";
		layers["conv7_d0"]->forward(tensors["sum4_d0"]->data(), tensors["conv7_d0"]->data(), tensors["conv7_d0_kernel"]->data(), tensors["conv7_d0_bias"]->data());
		std::cout << "conv7_d0 Finished!\n";
		std::cout << "Running elu7_d0!\n";
		std::cout << "elu7_d0 Finished!\n";
		std::cout << "Running score!\n";
		std::cout << "score Finished!\n";
		std::cout << "Running output!\n";
		std::cout << "output Finished!\n";
		std::cout << "Running unblock_output!\n";
		layers["unblock_output"]->forward(tensors["output"]->data(), tensors["user_output"]->data(), NULL, NULL);
		std::cout << "unblock_output Finished!\n";
		
	}
	auto end = std::chrono::high_resolution_clock::now();
	auto duration = std::chrono::duration_cast<std::chrono::microseconds>(end - begin).count();
	double secs = static_cast<double>(duration) / 1000000;
	std::cout << "average:" << secs/20 << "\n";
}

